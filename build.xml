<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="ACSCCyberTools" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>Builds the module suite ACSCCyberTools</description>

    <import file="nbproject/build-impl.xml"/>
    
    <property name="ivy.jar.file" value="${user.home}/.ivy2/ivy-2.5.0.jar"/>
    <property name="dependency.dir" value="ACSCCyberToolsDependencies"/>
    
    <!-- build jre zips -->
    <property name="dist.version" value="v2.0.0-rc1"/>
    <property name="jre.filename.windows" value="zulu11.37.19-ca-fx-jre11.0.6-win_x64"/>
    <property name="jre.url.windows" value="https://cdn.azul.com/zulu/bin/${jre.filename.windows}.zip"/>
    <property name="jre.filename.macosx" value="zulu11.37.19-ca-fx-jre11.0.6-macosx_x64"/><!-- zulu11.39.15-ca-fx-jre11.0.7-macosx_x64 Azul distribution is broken -->
    <property name="jre.url.macosx" value="https://cdn.azul.com/zulu/bin/${jre.filename.macosx}.tar.gz"/>
    <property name="jre.filename.linux" value="zulu11.37.19-ca-fx-jre11.0.6-linux_x64"/>
    <property name="jre.url.linux" value="https://cdn.azul.com/zulu/bin/${jre.filename.linux}.tar.gz"/>
    <property name="dist.filename.linux" value="constellation-linux-${dist.version}"/>
    <property name="dist.filename.windows" value="constellation-win-${dist.version}"/>
    <property name="dist.filename.macosx" value="constellation-macosx-${dist.version}"/>
    <property name="nobody" value="65534"/>
    
    <target name="update-dependencies-clean-build" 
            description="Download dependencies and build all modules in the suite.">
        <ant target="clean"/>
        <ant target="build">
            <property name="update.dependencies" value="true"/>
            <property name="ivy.lib.dir" value="${basedir}/${dependency.dir}/release/modules/ext"/>
            <property name="projectupdater.dir" value="${basedir}/../constellation/ProjectUpdater/"/>
        </ant>
    </target>

    <target name="update-dependencies-clean-build-no-debug" 
            description="Download dependencies and build all modules in the suite and exclude debugging.">
        <ant target="clean"/>
        <ant target="build">
            <property name="update.dependencies" value="true"/>
            <property name="ivy.lib.dir" value="${basedir}/${dependency.dir}/release/modules/ext"/>
            <property name="build.compiler.debug" value="false"/>
            <property name="projectupdater.dir" value="${basedir}/../constellation/ProjectUpdater/"/>
        </ant>
    </target>
    
    <!-- Windows Section -->

    <target name="-download-windows-jre" >
        <echo message="downloading JRE..."/>
        <get src="${jre.url.windows}"
             dest="${basedir}" usetimestamp="true"/>
        <unzip src="${basedir}/${jre.filename.windows}.zip" dest="${basedir}"/>
        <delete file="${basedir}/${jre.filename.windows}.zip"/>
    </target>

    <target name="build-zip-with-windows-jre" depends="build,build-launchers,-download-windows-jre" 
            description="Builds a ZIP distribution of the suite, launchers, and selected modules from the platform. This includes the JRE for Windows.">
        <mkdir dir="${dist.dir}"/>
        <!-- pathfileset does not support 'prefix' and 'filemode' parameters, we have to copy them to temp location -->
        <tempfile property="temp.dir.nbexec" destdir="${suite.build.dir}" deleteonexit="true" prefix="nbexec"/>
        <tempfile property="temp.dir.rest" destdir="${suite.build.dir}" deleteonexit="delete" prefix="rest"/>
        <subant genericantfile="${harness.dir}/suite.xml" target="copy-cluster" inheritrefs="true">
            <property name="dest.dir" value="${temp.dir.rest}"/>
            <property name="nbexec.dir" value="${temp.dir.nbexec}"/>
            <property name="build.dir" value="${suite.build.dir}"/>
            <resources refid="zip.platform.clusters"/>
        </subant>
        <fixcrlf srcdir="${build.launcher.dir}/etc/"
                 destdir="${build.launcher.dir}/etc/"
                 preservelastmodified="true"
                 eol="crlf" />
        
        <!-- work around to get the modified help jars to the build -->
        <copy file="${nbplatform.default.netbeans.dest.dir}/platform/modules/ext/jhall-2.0_05.jar" todir="${temp.dir.rest}/platform/modules/ext" verbose="true"/>
        
        <!-- delete the harness folder which is only required for testing -->
        <delete dir="${temp.dir.rest}/harness"/>
                
        <zip destfile="${dist.dir}/${dist.filename.windows}.zip">
            <zipfileset dir="${build.launcher.dir}/bin/" filemode="755" prefix="${app.name}/bin"/>
            <zipfileset dir="${build.launcher.dir}/etc/" prefix="${app.name}/etc"/>
            <zipfileset dir="${temp.dir.nbexec}" filemode="755" prefix="${app.name}"/>
            <zipfileset dir="${temp.dir.rest}" prefix="${app.name}"/>
            <zipfileset dir="${basedir}/${jre.filename.windows}/" prefix="${app.name}/jre"/>
            <!-- Yes, the doubled app.name is a bit ugly, but better than the alternative; cf. #66441: -->
            <zipfileset dir="${cluster}" prefix="${app.name}/${app.name}">
                <exclude name="config/Modules/*.xml_hidden"/>
            </zipfileset>
        </zip>
        <delete dir="${basedir}/${jre.filename.windows}/"/>
    </target>
    
    <!-- Linux Section -->

    <!-- This is a copy of -download-windows-jre, if there is a better way to do this then let me know -->
    <target name="-download-linux-jre" >
        <echo message="downloading JRE..."/>
        <get src="${jre.url.linux}"
             dest="${basedir}" usetimestamp="true"/>
        <untar src="${basedir}/${jre.filename.linux}.tar.gz" dest="${basedir}" compression="gzip"/>
        <delete file="${basedir}/${jre.filename.linux}.tar.gz"/>
    </target>

    <!-- This is a copy of build-zip-with-windows-jre", if there is a better way to do this then let me know -->
    <target name="build-zip-with-linux-jre" depends="build,build-launchers,-download-linux-jre" 
            description="Builds a ZIP distribution of the suite, launchers, and selected modules from the platform. This includes the JRE for Linux.">
        <mkdir dir="${dist.dir}"/>
        <!-- pathfileset does not support 'prefix' and 'filemode' parameters, we have to copy them to temp location -->
        <tempfile property="temp.dir.nbexec" destdir="${suite.build.dir}" deleteonexit="true" prefix="nbexec"/>
        <tempfile property="temp.dir.rest" destdir="${suite.build.dir}" deleteonexit="delete" prefix="rest"/>
        <subant genericantfile="${harness.dir}/suite.xml" target="copy-cluster" inheritrefs="true">
            <property name="dest.dir" value="${temp.dir.rest}"/>
            <property name="nbexec.dir" value="${temp.dir.nbexec}"/>
            <property name="build.dir" value="${suite.build.dir}"/>
            <resources refid="zip.platform.clusters"/>
        </subant>
        <fixcrlf srcdir="${build.launcher.dir}/etc/"
                 destdir="${build.launcher.dir}/etc/"
                 preservelastmodified="true"
                 eol="lf" />
        
        <!-- work around to get the modified help jars to the build -->
        <copy file="${nbplatform.default.netbeans.dest.dir}/platform/modules/ext/jhall-2.0_05.jar" todir="${temp.dir.rest}/platform/modules/ext" verbose="true"/>
        
        <!-- delete the harness folder which is only required for testing -->
        <delete dir="${temp.dir.rest}/harness"/>
        
        <tar destfile="${dist.dir}/${dist.filename.linux}.tar">
            <tarfileset dir="${build.launcher.dir}/bin/" filemode="755" prefix="${app.name}/bin" uid="${nobody}" gid="${nobody}"/>
            <tarfileset dir="${build.launcher.dir}/etc/" prefix="${app.name}/etc" uid="${nobody}" gid="${nobody}"/>
            <tarfileset dir="${temp.dir.nbexec}" filemode="755" prefix="${app.name}" uid="${nobody}" gid="${nobody}"/>
            <tarfileset dir="${temp.dir.rest}" prefix="${app.name}" uid="${nobody}" gid="${nobody}"/>

            <!-- Make sure the files in jre/bin are executable -->
            <tarfileset dir="${basedir}/${jre.filename.linux}/" prefix="${app.name}/jre" uid="${nobody}" gid="${nobody}">
                <exclude name="bin/*"/>
            </tarfileset>
            <tarfileset dir="${basedir}/${jre.filename.linux}/bin/" filemode="755" prefix="${app.name}/jre/bin" uid="${nobody}" gid="${nobody}"/>

            <!-- Yes, the doubled app.name is a bit ugly, but better than the alternative; cf. #66441: -->
            <tarfileset dir="${cluster}" prefix="${app.name}/${app.name}" uid="${nobody}" gid="${nobody}">
                <exclude name="config/Modules/*.xml_hidden"/>
            </tarfileset>
        </tar>
        <gzip src="${dist.dir}/${dist.filename.linux}.tar" destfile="${dist.dir}/${dist.filename.linux}.tar.gz"/>
        <delete file="${dist.dir}/${dist.filename.linux}.tar"/>
        <delete dir="${basedir}/${jre.filename.linux}/"/>
    </target>
    
    <!-- Useful Dependency Utilities -->
    <target name="check-latest-version" depends="-load-ivy-tasks" 
            description="Check whether there is a new release of a dependency.">
        <ivy:checkdepsupdate showTransitive="false" revisionToCheck="latest.release"/>
    </target>
    
    <target name="dependency-tree" depends="-load-ivy-tasks" 
            description="Output the dependencies in a tree layout to the console.">
        <ivy:dependencytree/>
    </target>
    
    <target name="dependency-report-html" depends="-load-ivy-tasks" 
            description="Generate a detailed dependency report">
        <delete dir="./ivy-reports"/>
        <mkdir dir="./ivy-reports" />

        <ivy:report todir="./ivy-reports" graph="false" xml="false"/>
    </target>
    
    <target name="-load-ivy-tasks">
        <path id="ivy.lib.path">
            <pathelement location="${ivy.jar.file}"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:resolve file="./${dependency.dir}/src/ivy.xml" />
    </target>       
</project>